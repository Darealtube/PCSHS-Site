// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Announcement {
  id         String   @id @unique @default(cuid())
  header     String   @db.VarChar(150)
  body       String   @db.VarChar(1500)
  footer     String?  @db.VarChar(800)
  image      String[]
  video      String?
  authorName String?  @db.VarChar(40)
  author     Profile? @relation(fields: [authorName], references: [name])
  type       String
  date       String
}

model Profile {
  id              String         @unique @default(cuid())
  lrn             String         @unique @db.VarChar(12)
  name            String         @unique @db.VarChar(40)
  email           String?        @unique
  image           String?
  password        String         @unique
  about           String?
  sex             String?
  date_of_birth   String?
  current_grade   String?
  current_section String?        @db.VarChar(20)
  address         String?
  role            String
  contact         String?        @db.Char(11)
  announcements   Announcement[]

  @@id([id, lrn, name])
}

model Event {
  id          String @id @unique @default(cuid())
  title       String @db.VarChar(50)
  description String @db.VarChar(400)
  day         Int
  month       Int
  year        Int
}

// Next Auth Models

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
