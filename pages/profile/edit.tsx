import { GetServerSideProps, GetStaticPropsResult } from "next";
import { Session } from "next-auth";
import { getSession, useSession } from "next-auth/client";
import prisma from "../../lib/prisma";
import Head from "next/head";
import EditStudentProfile from "../../Components/Profile/Edit Profiles/EditStudent";
import { Profile } from "../../types/PrismaTypes";
import { useReducer } from "react";
import profileReducer from "../../utils/Reducers/profileReducer";
import { useRouter } from "next/dist/client/router";
import dynamic from "next/dynamic";
import uploadImage from "../../utils/uploadImage";
import EditGovernmentProfile from "../../Components/Profile/Edit Profiles/EditGovernment";

const DynamicError = dynamic(() => import("../../Components/ErrorSnack"));

type ProfileProps = {
  session: Session | null;
  profile: Profile;
};

const EditProfile = ({ profile }: { profile: Profile }) => {
  const router = useRouter();
  const [prof, dispatch] = useReducer(profileReducer, {
    name: profile?.name || "",
    image: profile?.image || "/user-empty-avatar.png",
    lrn: profile?.lrn || "",
    current_grade: profile?.current_grade || "",
    current_section: profile?.current_section || "",
    date_of_birth: profile?.date_of_birth || null,
    email: profile?.email || "",
    sex: profile?.sex || "",
    contact: profile?.contact || "",
    address: profile?.address || "",
    about: profile?.about || "",
    members: profile?.members || "",
    error: false,
    errorMessage: "",
  });

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const { error, errorMessage, ...trueProfile } = prof;
    await fetch(
      `${process.env.NEXT_PUBLIC_DEV_URL as string}/api/updateProfile`,
      {
        method: "POST",
        body: JSON.stringify({
          ...trueProfile,
          image: await uploadImage(prof.image),
        }),
      }
    )
      .then((response) => {
        if (!response.ok) {
          throw new Error(response.statusText);
        } else {
          router.replace("/profile/");
        }
      })
      .catch((error: Error) =>
        dispatch({ type: "ERROR", payload: error.message })
      );
  };

  const handleError = () => {
    dispatch({
      type: "ERROR",
      payload: "",
    });
  };

  return (
    <>
      <Head>
        <title>PCSHS Student Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <form onSubmit={handleSubmit}>
        {profile?.role == "Student" ? (
          <EditStudentProfile student={prof} dispatch={dispatch} />
        ) : (
          <EditGovernmentProfile government={prof} dispatch={dispatch} />
        )}
      </form>
      <DynamicError
        open={prof.error}
        error={prof.errorMessage}
        handleClose={handleError}
      />
    </>
  );
};

export default EditProfile;

export const getServerSideProps: GetServerSideProps = async (
  context
): Promise<GetStaticPropsResult<ProfileProps>> => {
  const session = await getSession(context);
  if (session) {
    const profile = await prisma.profile.findUnique({
      where: {
        name: (session?.user as Session).name as string | undefined,
      },
      select: {
        name: true,
        current_grade: true,
        current_section: true,
        date_of_birth: true,
        lrn: true,
        sex: true,
        image: true,
        address: true,
        contact: true,
        email: true,
        members: true,
        role: true,
        about: true,
      },
    });

    return {
      props: {
        session: session,
        profile,
      },
    };
  } else {
    return {
      redirect: {
        destination: "/auth/signin",
        permanent: false,
      },
    };
  }
};
