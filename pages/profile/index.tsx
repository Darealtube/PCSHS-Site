import { Button } from "@mui/material";
import { GetServerSideProps, GetServerSidePropsResult } from "next";
import { Session } from "next-auth";
import { getSession } from "next-auth/react";
import prisma from "../../lib/prisma";
import Head from "next/head";
import { Profile as ProfileType } from "../../types/PrismaTypes";
import IDBack from "../../Components/Profile/Profiles/idBack";
import IDFront from "../../Components/Profile/Profiles/idFront";
import styles from "../../styles/Profile.module.css";
import { Box } from "@mui/system";
import { useState } from "react";
import FlipIcon from "@mui/icons-material/Flip";
import EditIcon from "@mui/icons-material/Edit";
import Link from "next/link";

type ProfileProps = {
  session: Session | null;
  profile: ProfileType;
};

const Profile = ({ profile }: ProfileProps) => {
  const [flipped, setFlipped] = useState(false);

  const handleFlip = () => {
    setFlipped(!flipped);
  };

  return (
    <>
      <Head>
        <title>PCSHS Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Button
        startIcon={<FlipIcon />}
        onClick={handleFlip}
        sx={{ position: "relative", bottom: "10px", mr: 2 }}
        variant="outlined"
      >
        Flip ID
      </Button>
      <Link passHref href="/profile/edit">
        <Button
          startIcon={<EditIcon />}
          component="a"
          sx={{ position: "relative", bottom: "10px", mr: 2 }}
          variant="outlined"
        >
          Edit
        </Button>
      </Link>
      <Box
        className={flipped ? styles.idContainerFlipped : styles.idContainer}
        sx={{ height: "100%" }}
        mb={16}
      >
        <IDFront profile={profile} />
        <IDBack profile={profile} />
      </Box>
      <Box height="40px" />
    </>
  );
};

export default Profile;

export const getServerSideProps: GetServerSideProps = async (
  context
): Promise<GetServerSidePropsResult<ProfileProps>> => {
  const session = await getSession(context);
  if (session) {
    const profile = await prisma.profile.findUnique({
      where: {
        name: (session?.user as Session).name as string | undefined,
      },
      select: {
        name: true,
        current_grade: true,
        current_section: true,
        date_of_birth: true,
        lrn: true,
        sex: true,
        image: true,
        address: true,
        contact: true,
        email: true,
        role: true,
        about: true,
      },
    });

    return {
      props: {
        session: session,
        profile,
      },
    };
  } else {
    return {
      redirect: {
        destination: "/auth/signin",
        permanent: false,
      },
    };
  }
};
