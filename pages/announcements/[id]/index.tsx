import { GetStaticProps } from "next";
import { useRouter } from "next/dist/client/router";
import Head from "next/head";
import useSWR from "swr";
import prisma from "../../../lib/prisma";
import { Announcement } from "../../../types/PrismaTypes";
import Image from "next/image";
import { Grid, Box, Typography, Divider, IconButton } from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import DeleteForeverIcon from "@mui/icons-material/DeleteForever";
import React, { useState } from "react";
import Markdown from "react-markdown";
import remarkGFM from "remark-gfm";
import Link from "next/link";
import Fallback from "../../../Components/Announcement/Fallback";
import dynamic from "next/dynamic";

const DynamicDeleteDialog = dynamic(
  () => import("../../../Components/Announcement/DeleteDialog")
);
const DynamicError = dynamic(() => import("../../../Components/ErrorSnack"));

type InitialProps = {
  announcement: Announcement;
  id: string;
};

const AnnouncementID = ({ announcement, id }: InitialProps) => {
  const router = useRouter();
  const { data } = useSWR(`/api/announcement/${id}/`, {
    fallbackData: announcement,
  });
  const [deleteOpen, setDeleteOpen] = useState(false);
  const [error, setError] = useState({
    error: false,
    errorMessage: "",
  });

  const handleDelete = () => {
    setDeleteOpen(!deleteOpen);
  };

  const handleErrorClose = () => {
    setError({
      error: false,
      errorMessage: "",
    });
  };

  const handleErrorOpen = (errorMessage: string) => {
    setError({
      error: true,
      errorMessage,
    });
  };

  if (router.isFallback) {
    return <Fallback />;
  }

  return (
    <>
      <Head>
        <title>PCSHS Announcement</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box
        width="100%"
        height={480}
        display="flex"
        alignItems="center"
        justifyContent="center"
        position="relative"
      >
        {(data?.image?.length != 0 || !!data?.video) && (
          <Grid container sx={{ height: "100%" }} spacing={1}>
            {data?.image &&
              data?.image.map((image) => (
                <React.Fragment key={image}>
                  <Grid item xs={(data.image as string[]).length > 1 ? 6 : 12}>
                    <Box
                      width="100%"
                      height="100%"
                      position="relative"
                      border="1px solid grey"
                      borderRadius="2%"
                    >
                      <Image
                        src={image}
                        layout="fill"
                        objectFit="cover"
                        alt="Announcement Image"
                      />
                    </Box>
                  </Grid>
                </React.Fragment>
              ))}
            {data?.video && (
              <video src={data?.video} width="100%" height="100%" controls />
            )}
          </Grid>
        )}
      </Box>

      <Box display="flex">
        <Typography variant="subtitle1" sx={{ flexGrow: 1 }} gutterBottom>
          Published by {data?.author?.name} on {data?.date}
        </Typography>

        <Link href={`/announcements/${id}/edit`} passHref>
          <IconButton component="a">
            <EditIcon />
          </IconButton>
        </Link>
        <IconButton onClick={handleDelete}>
          <DeleteForeverIcon />
        </IconButton>
      </Box>

      <Typography variant="h4">
        <Markdown plugins={[remarkGFM]}>{data?.header ?? ""}</Markdown>
      </Typography>

      <Typography variant="h6">
        <Markdown plugins={[remarkGFM]}>{data?.body ?? ""}</Markdown>
      </Typography>

      <Divider />

      <Typography variant="subtitle1" gutterBottom mb={8}>
        <Markdown plugins={[remarkGFM]}>{data?.footer ?? ""}</Markdown>
      </Typography>

      <Divider />

      <DynamicDeleteDialog
        handleClose={handleDelete}
        handleError={handleErrorOpen}
        open={deleteOpen}
      />
      <DynamicError
        open={error.error}
        error={error.errorMessage}
        handleClose={handleErrorClose}
      />
    </>
  );
};

export const getStaticPaths = async () => {
  const announcements = await prisma.announcement.findMany({
    select: {
      id: true,
    },
  });

  const paths = announcements.map((announcement) => ({
    params: { id: announcement.id },
  }));

  return { paths, fallback: true };
};

export const getStaticProps: GetStaticProps = async (context) => {
  const announcement = await prisma.announcement.findUnique({
    where: {
      id: context.params?.id as string,
    },
    select: {
      id: true,
      header: true,
      body: true,
      footer: true,
      image: true,
      video: true,
      date: true,
      author: {
        select: {
          image: true,
          name: true,
        },
      },
    },
  });

  if (!announcement) {
    return {
      notFound: true,
    };
  }

  return { props: { announcement, id: context.params?.id }, revalidate: 10 };
};

export default AnnouncementID;
