import Head from "next/head";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import { useState } from "react";
import styles from "../styles/Calendar.module.css";
import dayjs, { Dayjs } from "dayjs";
import {
  Accordion,
  AccordionDetails,
  AccordionSummary,
  AppBar,
  Box,
  IconButton,
  List,
  ListItem,
  ListItemAvatar,
  TextField,
  Toolbar,
  Typography,
} from "@mui/material";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DesktopDatePicker, LocalizationProvider } from "@mui/x-date-pickers";
import { PCSHSEvent } from "../types/PrismaTypes";
import { GetStaticProps } from "next";
import prisma from "../lib/prisma";
import useSWR from "swr";
import AddEventForm from "../Components/Calendar/addEventForm";
import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";
import EventIcon from "@mui/icons-material/Event";
import dynamic from "next/dynamic";

const DeleteDialog = dynamic(
  () => import("../Components/Calendar/Dialogs/removeEventDialog")
);

const UpdateDialog = dynamic(
  () => import("../Components/Calendar/Dialogs/updateEventDialog")
);

const initState = {
  day: dayjs().date(),
  month: dayjs().month() + 1,
  year: dayjs().year(),
};

const Calendar = ({ initialData }: { initialData: PCSHSEvent[] }) => {
  const [calendar, setCalendar] = useState<Dayjs | null>(dayjs());
  const [openDelete, setOpenDelete] = useState(false);
  const [openUpdate, setOpenUpdate] = useState(false);
  const [expanded, setExpanded] = useState("");
  const [eventClicked, setEventClicked] = useState({
    id: "",
    description: "",
    title: "",
  });

  const { data: events, mutate } = useSWR(
    calendar
      ? `/api/public/getEvents?d=${calendar.date()}&m=${
          calendar.month() + 1
        }&y=${calendar.year()}`
      : "/api/public/getEvents",
    { fallbackData: initialData }
  );

  const handleOpenEvent =
    (eventId: string) => (_e: React.SyntheticEvent, isExpanded: boolean) => {
      setExpanded(isExpanded ? eventId : "");
    };

  const handleDateChange = (newValue: Dayjs | null) => {
    setCalendar(newValue);
    setExpanded("");
  };

  const handleAddEvent = (newEvent: PCSHSEvent) => {
    mutate([...(events ?? []), newEvent]);
  };

  const handleDeleteEvent = (e: React.MouseEvent<HTMLButtonElement>) => {
    setEventClicked({ ...eventClicked, id: e.currentTarget.id });
    setOpenDelete(true);
  };

  const handleCloseDelEvent = () => {
    setEventClicked({ id: "", description: "", title: "" });
    setOpenDelete(false);
  };

  const handleDeleteMutate = (id: string) => {
    const newEvents = events?.filter((event: PCSHSEvent) => event.id != id);
    mutate(newEvents ?? []);
  };

  const handleUpdateEvent = (e: React.MouseEvent<HTMLButtonElement>) => {
    const description = e.currentTarget.getAttribute("data-event-desc");
    const title = e.currentTarget.getAttribute("data-event-title");
    setEventClicked({
      id: e.currentTarget.id,
      description: description ?? "",
      title: title ?? "",
    });
    setOpenUpdate(true);
  };

  const handleCloseUpdateEvent = () => {
    setEventClicked({ id: "", description: "", title: "" });
    setOpenUpdate(false);
  };

  const handleUpdateMutate = (newEvent: PCSHSEvent) => {
    if (!events) {
      mutate([]);
      return;
    }
    const updateIndex = events.findIndex((event) => event.id == newEvent.id);
    events[updateIndex] = newEvent;
    mutate(events);
  };

  return (
    <>
      <Head>
        <title>PCSHS Calendar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box height="100%" width="100%">
        <AppBar position="sticky" className={styles.calendarHeader}>
          <Toolbar>
            <Typography variant="h4" fontWeight={800} sx={{ flexGrow: 1 }}>
              PCSHS Events
            </Typography>
            <LocalizationProvider dateAdapter={AdapterDayjs}>
              <DesktopDatePicker
                value={calendar}
                minDate={dayjs(`${calendar!.year() - 1}-01-01`)}
                maxDate={dayjs(`${calendar!.year() + 1}-01-01`)}
                onChange={handleDateChange}
                renderInput={(params) => (
                  <Box sx={{ width: "120px" }}>
                    <TextField {...params} variant="standard" />
                  </Box>
                )}
              />
            </LocalizationProvider>
          </Toolbar>
        </AppBar>

        <List>
          {events?.map(({ id, title, description, day }) => (
            <ListItem key={id} divider>
              <ListItemAvatar sx={{ textAlign: "center" }}>
                <EventIcon />
              </ListItemAvatar>
              <Accordion
                expanded={expanded == id}
                onChange={handleOpenEvent(id)}
                sx={{
                  width: "100%",
                  background: "transparent",
                  border: 0,
                  boxShadow: 0,
                  "&::before": {
                    height: 0,
                  },
                }}
              >
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Typography
                    variant="h6"
                    fontWeight={600}
                    sx={{ flexGrow: 1 }}
                  >
                    {title}
                  </Typography>

                  <IconButton
                    id={id}
                    onClick={handleDeleteEvent}
                    sx={{ mr: 1 }}
                  >
                    <DeleteIcon />
                  </IconButton>

                  <IconButton
                    id={id}
                    data-event-desc={description}
                    data-event-title={title}
                    onClick={handleUpdateEvent}
                    sx={{ mr: 1 }}
                  >
                    <EditIcon />
                  </IconButton>
                </AccordionSummary>
                <AccordionDetails
                  sx={{
                    background: "#e4e4e4",
                    wordBreak: "break-word",
                    overflowWrap: "break-word",
                    whiteSpace: "pre-wrap",
                  }}
                >
                  <Typography variant="body1" fontWeight={400}>
                    {description}
                  </Typography>
                </AccordionDetails>
              </Accordion>
            </ListItem>
          ))}
          <ListItem divider>
            <Accordion
              expanded={expanded == "add"}
              onChange={handleOpenEvent("add")}
              sx={{
                width: "100%",
                background: "transparent",
                border: 0,
                boxShadow: 0,
                "&::before": {
                  height: 0,
                },
              }}
            >
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <Typography variant="h6" fontWeight={600}>
                  Add an Event
                </Typography>
              </AccordionSummary>

              <AccordionDetails>
                <AddEventForm
                  handleMutate={handleAddEvent}
                  calendar={calendar}
                />
              </AccordionDetails>
            </Accordion>
          </ListItem>
        </List>
      </Box>

      {openDelete && (
        <DeleteDialog
          open={openDelete}
          handleClose={handleCloseDelEvent}
          handleDeleteMutate={handleDeleteMutate}
          id={eventClicked.id}
        />
      )}

      {openUpdate && (
        <UpdateDialog
          open={openUpdate}
          handleClose={handleCloseUpdateEvent}
          handleMutate={handleUpdateMutate}
          day={eventClicked}
        />
      )}
    </>
  );
};

export const getStaticProps: GetStaticProps = async () => {
  const pcshsEvents = await prisma.event.findMany({
    where: initState,
    select: { id: true, title: true, description: true },
  });
  return {
    props: { initialData: pcshsEvents },
    revalidate: 10,
  };
};

export default Calendar;
