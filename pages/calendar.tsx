import {
  Grid,
  Paper,
  IconButton,
  Typography,
  Container,
  GridSize,
  useMediaQuery,
  useTheme,
} from "@mui/material";
import { Box } from "@mui/system";
import Head from "next/head";
import NavigateBeforeIcon from "@mui/icons-material/NavigateBefore";
import NavigateNextIcon from "@mui/icons-material/NavigateNext";
import { useState } from "react";
import MobileCalendar from "../Components/Calendar/mobileCalendar";
import EditIcon from "@mui/icons-material/Edit";
import AddIcon from "@mui/icons-material/Add";
import RemoveIcon from "@mui/icons-material/Remove";
import { Event } from "../types/PrismaTypes";
import dynamic from "next/dynamic";
import _ from "lodash";
import useCalendar from "../utils/Hooks/useCalendar";
import { useSession } from "next-auth/react";

const DynamicMobileCalendar = dynamic(
  () => import("../Components/Calendar/mobileCalendar")
);

const DynamicEventPopover = dynamic(
  () => import("../Components/Calendar/EventPopover")
);
const DynamicAddEventDialog = dynamic(
  () => import("../Components/Calendar/Dialogs/addEventDialog")
);
const DynamicRemoveEventDialog = dynamic(
  () => import("../Components/Calendar/Dialogs/removeEventDialog")
);
const DynamicUpdateEventDialog = dynamic(
  () => import("../Components/Calendar/Dialogs/updateEventDialog")
);

const Days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

const Months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

const Calendar = () => {
  const { data: session } = useSession();
  const theme = useTheme();
  const tablet = useMediaQuery("(min-width: 900px) and (max-width: 1200px)");
  const mobile = useMediaQuery(theme.breakpoints.only("xs"));
  const { calendar, dispatch, dayArray, events, mutate } = useCalendar();
  const [openAddDialog, setOpenAddDialog] = useState(false);
  const [openRemoveDialog, setOpenRemoveDialog] = useState(false);
  const [openUpdateDialog, setOpenUpdateDialog] = useState(false);
  const [dayClicked, setDayClicked] = useState<number | string | null>(null);
  const [dayHovered, setDayHovered] = useState<number | null>(null);
  const [eventAnchor, setEventAnchor] = useState<null | HTMLElement>(null);

  const handleAddMutate = (newEvent: Event) => {
    mutate([...events, newEvent]);
  };

  const handleDeleteMutate = (id: string) => {
    const newEvents = events?.filter((event: Event) => event.id != id);
    mutate([...newEvents]);
  };

  const handleUpdateMutate = (newEvent: Event) => {
    const updatedEvents = events.map((event: Event) =>
      event.id == newEvent.id ? (event = newEvent) : event
    );
    mutate([...updatedEvents]);
  };

  const handleEventOpen = (e: React.MouseEvent<HTMLElement>) => {
    setDayHovered(+e.currentTarget.id);
    setEventAnchor(e.currentTarget);
  };

  const handleEventClose = () => {
    setDayHovered(null);
    setEventAnchor(null);
  };

  const handleNextDate = () => {
    dispatch({ type: "NEXT_MONTH" });
  };

  const handlePreviousDate = () => {
    dispatch({ type: "PREVIOUS_MONTH" });
  };

  const handleAddEvent = (e: React.MouseEvent<HTMLButtonElement>) => {
    setDayClicked(+e.currentTarget.value);
    setOpenAddDialog(true);
  };

  const handleCloseAddEvent = () => {
    setDayClicked(null);
    setOpenAddDialog(false);
  };

  const handleRemoveEvent = (e: React.MouseEvent<HTMLButtonElement>) => {
    setDayClicked(e.currentTarget.id);
    setOpenRemoveDialog(true);
  };

  const handleCloseRemoveEvent = () => {
    setDayClicked(null);
    setOpenRemoveDialog(false);
  };

  const handleUpdateEvent = (e: React.MouseEvent<HTMLButtonElement>) => {
    setDayClicked(e.currentTarget.value);
    setOpenUpdateDialog(true);
  };

  const handleCloseUpdateEvent = () => {
    setDayClicked(null);
    setOpenUpdateDialog(false);
  };

  return (
    <>
      <Head>
        <title>PCSHS Calendar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {mobile || tablet ? (
        <DynamicMobileCalendar
          calendar={calendar}
          dispatch={dispatch}
          day={_.filter(dayArray, ["day", calendar.day])[0]}
          add={handleAddMutate}
          update={handleUpdateMutate}
          remove={handleDeleteMutate}
        />
      ) : (
        <Paper
          elevation={6}
          sx={{
            height: "720px",
            backgroundColor: "#e9ecef",
            marginBottom: "24px",
          }}
        >
          <Container>
            <Box
              display="flex"
              border="1px solid grey"
              sx={{ backgroundColor: "#495057" }}
            >
              <IconButton
                size="large"
                onClick={handlePreviousDate}
                sx={{ color: "white" }}
              >
                <NavigateBeforeIcon />
              </IconButton>
              <Typography
                align="center"
                variant="h2"
                sx={{ flexGrow: 1, wordBreak: "break-all" }}
                color="white"
              >
                {Months[calendar.month - 1]}
              </Typography>
              <IconButton
                size="large"
                sx={{ color: "white" }}
                onClick={handleNextDate}
              >
                <NavigateNextIcon />
              </IconButton>
            </Box>

            <Grid container spacing={2} columns={14}>
              {Days.map((day) => (
                <Grid
                  item
                  xs={2}
                  key={day}
                  sx={{
                    textAlign: "center",
                    marginBottom: "32px",
                    marginTop: "16px",
                  }}
                >
                  {day}
                </Grid>
              ))}

              <Grid
                item
                xs={
                  calendar.dayStart * 2 == 0
                    ? false
                    : ((calendar.dayStart * 2) as GridSize)
                }
                sx={{
                  display: calendar.dayStart * 2 == 0 ? "none" : "block",
                }}
              ></Grid>

              {dayArray.map((day) => (
                <Grid
                  item
                  xs={2}
                  id={`${day.day}`}
                  key={day.day}
                  sx={{
                    border: "1px solid grey",
                    backgroundColor: day.id ? "#0466C8" : "inherit",
                  }}
                  onMouseEnter={day.id ? handleEventOpen : undefined}
                  onMouseLeave={day.id ? handleEventClose : undefined}
                >
                  {session?.role == "Government" && (
                    <>
                      <IconButton
                        size="small"
                        onClick={day.id ? handleRemoveEvent : handleAddEvent}
                        value={day.day}
                        id={day.id ?? undefined}
                      >
                        {day.id ? <RemoveIcon /> : <AddIcon />}
                      </IconButton>
                      {day.id && (
                        <IconButton
                          size="small"
                          value={day.id ? day.id : undefined}
                          onClick={day.id ? handleUpdateEvent : undefined}
                        >
                          <EditIcon />
                        </IconButton>
                      )}
                    </>
                  )}
                  <Typography variant="h4" align="center">
                    {day.day}
                  </Typography>
                </Grid>
              ))}
            </Grid>
          </Container>
        </Paper>
      )}

      {openAddDialog && (
        <DynamicAddEventDialog
          open={openAddDialog}
          handleClose={handleCloseAddEvent}
          handleMutate={handleAddMutate}
          day={_.filter(dayArray, ["day", dayClicked])[0]}
        />
      )}

      {openUpdateDialog && (
        <DynamicUpdateEventDialog
          open={openUpdateDialog}
          handleClose={handleCloseUpdateEvent}
          handleMutate={handleUpdateMutate}
          day={_.filter(dayArray, ["id", dayClicked])[0]}
        />
      )}

      {openRemoveDialog && (
        <DynamicRemoveEventDialog
          open={openRemoveDialog}
          handleClose={handleCloseRemoveEvent}
          handleDeleteMutate={handleDeleteMutate}
          id={dayClicked as string}
        />
      )}

      {events && Boolean(eventAnchor) == true && (
        <DynamicEventPopover
          open={Boolean(eventAnchor)}
          handleOpen={handleEventOpen}
          handleClose={handleEventClose}
          anchor={eventAnchor}
          event={events?.find((event: Event) => event.day == dayHovered)}
        />
      )}
    </>
  );
};

export default Calendar;
