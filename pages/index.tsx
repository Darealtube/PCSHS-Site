import type { GetStaticProps, GetStaticPropsResult } from "next";
import Head from "next/head";
import AnnounceWidget from "../Components/Widget/AnnounceWidget";
import prisma from "../lib/prisma";
import { Announcement as AnnouncementType } from "../types/PrismaTypes";
import {
  Divider,
  Box,
  IconButton,
  Typography,
  CircularProgress,
} from "@mui/material";
import Announcement from "../Components/Announcement";
import { useSession } from "next-auth/client";
import KeyboardArrowDownIcon from "@mui/icons-material/KeyboardArrowDown";
import React, { useState } from "react";
import InfiniteScroll from "react-infinite-scroll-component";
import useAnnouncements from "../utils/useAnnouncements";

type Props = {
  initAnnouncements: AnnouncementType[];
};

type ListProps = {
  announcements: AnnouncementType[];
  moreAnnouncements: () => void;
  noMore: boolean | undefined;
};

const AnnouncementList = ({
  announcements,
  moreAnnouncements,
  noMore,
}: ListProps) => {
  return (
    <InfiniteScroll
      next={moreAnnouncements}
      dataLength={announcements.length}
      loader={
        <Box
          width="100%"
          display="flex"
          alignItems="center"
          justifyContent="center"
          marginBottom={2}
        >
          <CircularProgress color="inherit" />
        </Box>
      }
      hasMore={!noMore}
      scrollableTarget={"scrollable"}
    >
      {announcements &&
        announcements.map((announcement) => (
          <React.Fragment key={announcement.id}>
            <Announcement announcement={announcement} type="SSG" />
          </React.Fragment>
        ))}
    </InfiniteScroll>
  );
};

const Home = ({ initAnnouncements }: Props) => {
  const [session] = useSession();
  const [viewCreate, setViewCreate] = useState(false);
  const { announcements, moreAnnouncements, noMore, mutateAnnouncements } =
    useAnnouncements(1, [[...initAnnouncements]]);
  const handleCreate = () => {
    setViewCreate(!viewCreate);
  };

  return (
    <>
      <Head>
        <title>PCSHS Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {session?.role == "Government" && (
        <>
          <Box
            display="flex"
            flexDirection="column"
            alignItems="center"
            justifyContent="center"
          >
            <Typography align="center">Create an Announcement</Typography>
            <IconButton onClick={handleCreate}>
              <KeyboardArrowDownIcon />
            </IconButton>
          </Box>
          <AnnounceWidget display={viewCreate} mutate={mutateAnnouncements} />
          <Divider sx={{ marginTop: "16px", marginBottom: "16px" }} />
        </>
      )}
      {announcements && (
        <AnnouncementList
          announcements={announcements}
          moreAnnouncements={moreAnnouncements}
          noMore={noMore}
        />
      )}
    </>
  );
};

export default Home;

export const getStaticProps: GetStaticProps = async (): Promise<
  GetStaticPropsResult<Props>
> => {
  const announcements = await prisma.announcement.findMany({
    where: {
      OR: [{ type: "SSG Announcement" }, { type: "School Announcement" }],
    },
    select: {
      id: true,
      header: true,
      body: true,
      footer: true,
      image: true,
      video: true,
      date: true,
      author: {
        select: {
          image: true,
          name: true,
        },
      },
    },
    orderBy: [
      {
        id: "desc",
      },
    ],
    take: 1,
  });
  return { props: { initAnnouncements: announcements } };
};
